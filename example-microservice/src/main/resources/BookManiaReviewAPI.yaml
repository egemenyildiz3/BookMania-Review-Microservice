openapi: 3.0.3
info:
  title: BookMania-ReviewMicroservice
  description: Specifications about all endpoints of the review microservices for the BookMania application
  version: 1.0.0
servers:
  - url: 'https://bookmania.tudelft.nl/api'
tags:
  - name: review
    description: actions for reviews
  - name: comment
    description: actions for comments
  - name: bookData
    description: hand out report (only for authors)
  - name: public book statistics
    description: provide statistics for books that are visible to all users
  - name: report
    description: reporting inappropriate reviews and comments
paths:
  /review:
    post:
      tags:
        - review
      summary: create a new review to a specific book
      description: creates and stores a new review in the database that is associated with the user who created it and the book it was created to
      requestBody:
        description: Create a new review for a book
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        required: true
      responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Review'
          '405':
            description: Internal server error - cannot save review
          '400':
            description: Invalid book or user

  /review/update/{userId}:
    put:
      tags:
        - review
      summary: updates a review
      description: applies the changes made to the review
      parameters:
        - name: userId
          in: path
          description: user who tries to edit review
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: updates a review for the book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '405':
          description: Invalid input
        '400':
         description: cannot find user
        '403':
          description: permission denied - not owner or admin
  /review/delete/{reviewId}/{userId}:
    delete:
      tags:
        - review
      summary: deletes a review
      description: deletes the review from review database, book and user
      parameters:
        - name: reviewId
          in: path
          description: id of review to be deleted
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: user who tries to delete review
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: cannot find review
        '403':
          description: permission denied - not owner or admin
  /review/{reviewId}:
    get:
      tags:
        - review
      summary: getting a review
      description: display the review with this reviewId from the database
      parameters:
        - name: reviewId
          in: path
          description: the reviewId we are searching for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Review'
        '400':
          description: cannot find review
  /seeAllReviews/{bookId}/{filter}:
    get:
      tags:
        - review
      summary: get reviews for book
      description: searches the database for the reviews that are made to that bookId (with other api, gets the book and its list of reviews from the other database)
      parameters:
        - name: bookId
          in: path
          description: the book for which we are getting reviews
          required: true
          schema:
            type: integer
            format: int64
        - name: filter
          in: path
          description: how to sort the reviews
          required: true
          schema:
            type: string
            enum:
              - mostRelevant
              - mostRecent
              - highestRated
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: cannot find book
  /review/vote/{reviewId}:
    put:
      tags:
        - review
      summary: upvoting or downvoting a review
      description: sending either a 0 or 1 to server for downvoting or upvoting a review respectfully
      parameters:
        - name: reviewId
          in: path
          description: the reviewId of the desired review for upvote or downvote
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 1 for upvote or 0 for downvote
        content:
          application/json:
            schema:
              type: integer
              format: int32
              example: 0
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid review
  /review/pin/{reviewId}:
    put:
      tags:
        - review
      summary: pinning a review
      description: places the review at the start of the list of reviews for the book
      parameters:
        - name: reviewId
          in: path
          description: the reviewId of the desired review to pin, set pinned boolean to true
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: the value to which we set the pinned boolean of the review
        content:
          application/json:
            schema:
              type: boolean
              example: true
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid review
  /review/mostUpvoted/{userId}:
    get:
      tags:
        - review
      summary: get the top reviews for the user
      description: searches the database for the reviews that are made by that user and returns top three most recent ones
      parameters:
        - name: userId
          in: path
          description: the user for which we are getting top reviews
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: cannot find user
  /report:
    put:
      tags:
        - report
      summary: reporting a review/comment
      description: the review/comment is set as reported and can be assessed by the admin for deletion or user ban
      requestBody:
        description: the comment/review that is reported
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid review
  /reported/{userId}:
    get:
      tags:
         - report
      summary: see reported reviews/comments
      description: shows all of the reported reviews to the admin
      parameters:
        - name: userId
          in: path
          description: user that is trying to get reported content, check if he is admin
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: No reported reviews
        '401':
          description: No found user
        '402':
          description: User not an admin
  /report/delete/{reportId}/{userId}:
    delete:
      tags:
        - report
      summary: delete a report
      description: deletes the report with this reportId if the userId is an admin
      parameters:
        - name: userId
          in: path
          description: user that is trying to delete the report
          schema:
            type: integer
            format: int64
        - name: reportId
          in: path
          description: the id of the report that is requested for deletion
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: No report with this id
        '401':
          description: No found user
        '402':
          description: User not an admin
  /review/spoiler/{reviewId}:
    put:
      tags:
        - review
      summary: adding a spoiler flag to the review
      description: setting the spoiler value in the review to true
      parameters:
        - name: reviewId
          in: path
          description: the reviewId of the desired review to add a spoiler warning to
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid review
  /getAvrRating/{bookId}/{userId}:
    get:
      tags:
        - public book statistics
      summary: the average rating for the book
      description: returns the average rating for this bookId, calls report with a user that is not the author of the book
      parameters:
        - name: bookId
          in: path
          description: the bookId of the book to get the average rating of
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: the user that requests the average rating of
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 4.4
        '400':
          description: cannot find book
        '401':
          description: cannot find user
  /getPublicInteractions/{bookId}/{userId}:
    get:
      tags:
        - public book statistics
      summary: how many reviews the book has
      description: returns the amount of reviews, so that users can quickly see the interactions and popularity of the book
      parameters:
        - name: bookId
          in: path
          description: the book to return number of reviews
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: the user that requests number of reviews
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 250
        '400':
          description: cannot find book

  /comment/add/{reviewId}/{userId}:
    post:
      tags:
        - comment
      summary: create a new comment to a specific review
      description: creates and stores a new comment in the database that is associated with the user who created it and the review it was created to
      parameters:
        - name: userId
          in: query
          description: user who creates the comment
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          description: the review for which the comment is created
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create a new comment to a review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '405':
          description: Internal server error - cannot save comment
        '400':
          description: Invalid review or user

  /comment/edit/{userId}:
    put:
      tags:
        - comment
      summary: updates a comment
      description: applies the changes made to the comment
      parameters:
        - name: userId
          in: path
          description: user who tries to edit comment
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: updates a comment for a review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '405':
          description: Invalid input
        '400':
          description: cannot find comment
        '403':
          description: permission denied - not owner or admin
  /comment/delete/{commentId}/{userId}:
    delete:
      tags:
        - comment
      summary: deletes a comment
      description: deletes the comment from comment database, book and user
      parameters:
        - name: commentId
          in: path
          description: id of review to be deleted
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: userId who tries to delete review
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: cannot find comment
        '403':
          description: permission denied - not owner or admin
  /comment/{commentId}:
    get:
      tags:
        - comment
      summary: getting a comment
      description: display the comment with this commentId from the database
      parameters:
        - name: commentId
          in: path
          description: the commentId we are searching for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: cannot find comment
  /comment/vote/{commentId}:
    put:
      tags:
        - comment
      summary: upvoting or downvoting a comment
      description: sending either a 0 or 1 to server for downvoting or upvoting a comment respectfully
      parameters:
        - name: commentId
          in: path
          description: the commentId of the desired comment for upvote or downvote
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 1 for upvote or 0 for downvote
        content:
          application/json:
            schema:
              type: integer
              format: int32
              example: 0
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid comment
  /getReport/{bookId}/{userId}/{info}:
    get:
      tags:
        - bookData
      summary: report about a book
      description: generates and returns a report about the reviews and interactions of the book; depending on the value of info, we return a report if the user is an author, for rating and interactions, we do not check the user and just return the information
      parameters:
        - name: bookId
          in: path
          description: the bookId of the book to generate a report for
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: the userId that requests the report - should be checked if it is the author of the book
          required: true
          schema:
            type: integer
            format: int64
        - name: info
          in: path
          description: what the user is requesting
          schema:
            type: string
            enum:
              - report
              - rating
              - interactions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookData'
        '400':
          description: cannot find book
        '401':
          description: cannot find user

components:
  schemas:
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        bookId:
          type: integer
          format: int64
          example: 1234
        userId:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: wow
        text:
          type: string
          example: nice book
        rating:
          type: integer
          format: int64
          example: 4
        commentList:
          type: array
          items:
            type: integer
            format: int64
        upvote:
          type: integer
          format: int64
          example: 453
        downvote:
          type: integer
          format: int64
          example: 345
        spoiler:
          type: boolean
          example: true
        bookNotion:
          type: string
          enum:
            - POSITIVE
            - NEGATIVE
            - NEUTRAL
        pinned:
          type: boolean
          example: false
        reported:
          type: boolean
          example: true
        timeCreated:
          type: string
          format: date
          example: '2013-10-24'
        lastEditTime:
          type: string
          format: date
          example: '2013-10-24'
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        reviewId:
          type: integer
          format: int64
          example: 3
        userId:
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: bad review
        upvote:
          type: integer
          format: int64
          example: 453
        downvote:
          type: integer
          format: int64
          example: 345
        timeCreated:
          type: string
          format: date
          example: '2013-10-24'
    BookData:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          example: 23
        avrRating:
          type: integer
          format: int64
          example: 4.3
        mostUpvotedReview:
          type: integer
          format: int64
        mostUpvotedComment:
          type: integer
          format: int64
        positiveRev:
          type: integer
          format: int32
          example: 20
        negativeRev:
          type: integer
          format: int32
          example: 15
        neutralRev:
          type: integer
          format: int32
          example: 4
    Report:
      type: object
      properties:
        object:
          type: object
        text:
          type: string
          example: offensive