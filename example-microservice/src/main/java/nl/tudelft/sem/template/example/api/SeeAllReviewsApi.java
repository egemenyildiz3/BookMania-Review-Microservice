/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.template.example.api;

import nl.tudelft.sem.template.example.api.ApiUtil;
import nl.tudelft.sem.template.example.model.Review;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-05T16:23:47.330644900+01:00[Europe/Amsterdam]")
@Validated
@Tag(name = "review", description = "actions for reviews")
public interface SeeAllReviewsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /seeAllReviews/{bookId}/{filter} : get reviews for book
     * searches the database for the reviews that are made to that bookId (with other api, gets the book and its list of reviews from the other database)
     *
     * @param bookId the book for which we are getting reviews (required)
     * @param filter how to sort the reviews (required)
     * @return Successful operation (status code 200)
     *         or cannot find book (status code 400)
     */
    @Operation(
        operationId = "seeAllReviewsBookIdFilterGet",
        summary = "get reviews for book",
        description = "searches the database for the reviews that are made to that bookId (with other api, gets the book and its list of reviews from the other database)",
        tags = { "review" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))
            }),
            @ApiResponse(responseCode = "400", description = "cannot find book")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/seeAllReviews/{bookId}/{filter}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Review>> seeAllReviewsBookIdFilterGet(
        @Parameter(name = "bookId", description = "the book for which we are getting reviews", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Long bookId,
        @Parameter(name = "filter", description = "how to sort the reviews", required = true, in = ParameterIn.PATH) @PathVariable("filter") String filter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"commentList\" : [ 0, 0 ], \"pinned\" : false, \"rating\" : 4, \"title\" : \"wow\", \"userId\" : 10, \"upvote\" : 453, \"bookNotion\" : \"POSITIVE\", \"bookId\" : 1234, \"downvote\" : 345, \"spoiler\" : true, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 10, \"text\" : \"nice book\", \"lastEditTime\" : \"2013-10-24T00:00:00.000+00:00\" }, { \"commentList\" : [ 0, 0 ], \"pinned\" : false, \"rating\" : 4, \"title\" : \"wow\", \"userId\" : 10, \"upvote\" : 453, \"bookNotion\" : \"POSITIVE\", \"bookId\" : 1234, \"downvote\" : 345, \"spoiler\" : true, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 10, \"text\" : \"nice book\", \"lastEditTime\" : \"2013-10-24T00:00:00.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
