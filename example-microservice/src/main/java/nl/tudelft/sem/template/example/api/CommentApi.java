/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.template.example.api;

import nl.tudelft.sem.template.api.ApiUtil;
import nl.tudelft.sem.template.model.Comment;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-05T16:23:47.330644900+01:00[Europe/Amsterdam]")
@Validated
@Tag(name = "comment", description = "actions for comments")
public interface CommentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /comment/add/{reviewId}/{userId} : create a new comment to a specific review
     * creates and stores a new comment in the database that is associated with the user who created it and the review it was created to, check for profanities
     *
     * @param userId user who creates the comment (required)
     * @param reviewId the review for which the comment is created (required)
     * @param comment Create a new comment to a review (required)
     * @return Successful operation (status code 200)
     *         or Internal server error - cannot save comment (status code 405)
     *         or Invalid review or user (status code 400)
     *         or profanities detected (status code 406)
     */
    @Operation(
        operationId = "commentAddReviewIdUserIdPost",
        summary = "create a new comment to a specific review",
        description = "creates and stores a new comment in the database that is associated with the user who created it and the review it was created to, check for profanities",
        tags = { "comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "405", description = "Internal server error - cannot save comment"),
            @ApiResponse(responseCode = "400", description = "Invalid review or user"),
            @ApiResponse(responseCode = "406", description = "profanities detected")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/comment/add/{reviewId}/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Comment> commentAddReviewIdUserIdPost(
        @Parameter(name = "userId", description = "user who creates the comment", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "reviewId", description = "the review for which the comment is created", required = true, in = ParameterIn.PATH) @PathVariable("reviewId") Long reviewId,
        @Parameter(name = "Comment", description = "Create a new comment to a review", required = true) @Valid @RequestBody Comment comment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"downvote\" : 345, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 3, \"text\" : \"bad review\", \"reviewId\" : 3, \"userId\" : 10, \"upvote\" : 453 }";
                    nl.tudelft.sem.template.api.ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /comment/{commentId} : getting a comment
     * display the comment with this commentId from the database
     *
     * @param commentId the commentId we are searching for (required)
     * @return Successful operation (status code 200)
     *         or cannot find comment (status code 400)
     */
    @Operation(
        operationId = "commentCommentIdGet",
        summary = "getting a comment",
        description = "display the comment with this commentId from the database",
        tags = { "comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "400", description = "cannot find comment")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/comment/{commentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Comment> commentCommentIdGet(
        @Parameter(name = "commentId", description = "the commentId we are searching for", required = true, in = ParameterIn.PATH) @PathVariable("commentId") Long commentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"downvote\" : 345, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 3, \"text\" : \"bad review\", \"reviewId\" : 3, \"userId\" : 10, \"upvote\" : 453 }";
                    nl.tudelft.sem.template.api.ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /comment/delete/{commentId}/{userId} : deletes a comment
     * deletes the comment from comment database, book and user
     *
     * @param commentId id of comment to be deleted (required)
     * @param userId userId who tries to delete comment (required)
     * @return Successful operation (status code 200)
     *         or cannot find comment (status code 400)
     *         or permission denied - not owner or admin (status code 403)
     */
    @Operation(
        operationId = "commentDeleteCommentIdUserIdDelete",
        summary = "deletes a comment",
        description = "deletes the comment from comment database, book and user",
        tags = { "comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "cannot find comment"),
            @ApiResponse(responseCode = "403", description = "permission denied - not owner or admin")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/comment/delete/{commentId}/{userId}"
    )
    default ResponseEntity<Void> commentDeleteCommentIdUserIdDelete(
        @Parameter(name = "commentId", description = "id of comment to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("commentId") Long commentId,
        @Parameter(name = "userId", description = "userId who tries to delete comment", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /comment/edit/{userId} : updates a comment
     * applies the changes made to the comment, check for profanities
     *
     * @param userId user who tries to edit comment (required)
     * @param comment updates a comment for a review (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     *         or cannot find comment (status code 400)
     *         or permission denied - not owner or admin (status code 403)
     *         or profanities detected (status code 406)
     */
    @Operation(
        operationId = "commentEditUserIdPut",
        summary = "updates a comment",
        description = "applies the changes made to the comment, check for profanities",
        tags = { "comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input"),
            @ApiResponse(responseCode = "400", description = "cannot find comment"),
            @ApiResponse(responseCode = "403", description = "permission denied - not owner or admin"),
            @ApiResponse(responseCode = "406", description = "profanities detected")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/comment/edit/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Comment> commentEditUserIdPut(
        @Parameter(name = "userId", description = "user who tries to edit comment", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "Comment", description = "updates a comment for a review", required = true) @Valid @RequestBody Comment comment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"downvote\" : 345, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 3, \"text\" : \"bad review\", \"reviewId\" : 3, \"userId\" : 10, \"upvote\" : 453 }";
                    nl.tudelft.sem.template.api.ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /comment/{reviewId} : getting a list of comments for review
     * display the comments with to this reviewId from the database
     *
     * @param reviewId the reviewId we are searching for (required)
     * @return Successful operation (status code 200)
     *         or cannot find reviewId (status code 400)
     */
    @Operation(
        operationId = "commentReviewIdGet",
        summary = "getting a list of comments for review",
        description = "display the comments with to this reviewId from the database",
        tags = { "comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Comment.class)))
            }),
            @ApiResponse(responseCode = "400", description = "cannot find reviewId")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/comment/{reviewId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Comment>> commentReviewIdGet(
        @Parameter(name = "reviewId", description = "the reviewId we are searching for", required = true, in = ParameterIn.PATH) @PathVariable("reviewId") Long reviewId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"downvote\" : 345, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 3, \"text\" : \"bad review\", \"reviewId\" : 3, \"userId\" : 10, \"upvote\" : 453 }, { \"downvote\" : 345, \"timeCreated\" : \"2013-10-24T00:00:00.000+00:00\", \"id\" : 3, \"text\" : \"bad review\", \"reviewId\" : 3, \"userId\" : 10, \"upvote\" : 453 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /comment/vote/{commentId} : upvoting or downvoting a comment
     * sending either a 0 or 1 to server for downvoting or upvoting a comment respectfully
     *
     * @param commentId the commentId of the desired comment for upvote or downvote (required)
     * @param body 1 for upvote or 0 for downvote (optional)
     * @return Successful operation (status code 200)
     *         or Invalid comment (status code 400)
     */
    @Operation(
        operationId = "commentVoteCommentIdPut",
        summary = "upvoting or downvoting a comment",
        description = "sending either a 0 or 1 to server for downvoting or upvoting a comment respectfully",
        tags = { "comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid comment")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/comment/vote/{commentId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> commentVoteCommentIdPut(
        @Parameter(name = "commentId", description = "the commentId of the desired comment for upvote or downvote", required = true, in = ParameterIn.PATH) @PathVariable("commentId") Long commentId,
        @Parameter(name = "body", description = "1 for upvote or 0 for downvote") @Valid @RequestBody(required = false) Integer body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
