/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.template.example.api;

import nl.tudelft.sem.template.example.model.Comment;
import nl.tudelft.sem.template.example.model.Review;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-05T16:23:47.330644900+01:00[Europe/Amsterdam]")
@Validated
@Tag(name = "report", description = "reporting inappropriate reviews and comments")
public interface ReportApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /report/comment : reporting a comment
     * the comment is set as reported and can be assessed by the admin for deletion or user ban
     *
     * @param comment the comment that is reported (required)
     * @return Successful operation (status code 200)
     *         or cannot save report (status code 400)
     */
    @Operation(
        operationId = "reportCommentPost",
        summary = "reporting a comment",
        description = "the comment is set as reported and can be assessed by the admin for deletion or user ban",
        tags = { "report" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "cannot save report")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/report/comment",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> reportCommentPost(
        @Parameter(name = "Comment", description = "the comment that is reported", required = true) @Valid @RequestBody Comment comment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /report/delete/{reportId}/{userId} : delete a report
     * deletes the report with this reportId if the userId is an admin
     *
     * @param userId user that is trying to delete the report (required)
     * @param reportId the id of the report that is requested for deletion (required)
     * @return successful operation (status code 200)
     *         or No report with this id (status code 400)
     *         or Not found user (status code 401)
     *         or permission denied - not owner or admin (status code 403)
     */
    @Operation(
        operationId = "reportDeleteReportIdUserIdDelete",
        summary = "delete a report",
        description = "deletes the report with this reportId if the userId is an admin",
        tags = { "report" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation"),
            @ApiResponse(responseCode = "400", description = "No report with this id"),
            @ApiResponse(responseCode = "401", description = "Not found user"),
            @ApiResponse(responseCode = "403", description = "permission denied - not owner or admin")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/report/delete/{reportId}/{userId}"
    )
    default ResponseEntity<Void> reportDeleteReportIdUserIdDelete(
        @Parameter(name = "userId", description = "user that is trying to delete the report", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "reportId", description = "the id of the report that is requested for deletion", required = true, in = ParameterIn.PATH) @PathVariable("reportId") Long reportId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /report/review : reporting a review
     * the review is set as reported and can be assessed by the admin for deletion or user ban
     *
     * @param review the review that is reported (required)
     * @return Successful operation (status code 200)
     *         or cannot save report (status code 400)
     */
    @Operation(
        operationId = "reportReviewPost",
        summary = "reporting a review",
        description = "the review is set as reported and can be assessed by the admin for deletion or user ban",
        tags = { "report" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "cannot save report")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/report/review",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> reportReviewPost(
        @Parameter(name = "Review", description = "the review that is reported", required = true) @Valid @RequestBody Review review
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
